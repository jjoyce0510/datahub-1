query appConfig {
    appConfig {
        appVersion
        policiesConfig {
            enabled
            platformPrivileges {
                type
                displayName
                description
            }
            resourcePrivileges {
                resourceType
                resourceTypeDisplayName
                entityType
                privileges {
                    type
                    displayName
                    description
                }
            }
        }
        analyticsConfig {
            enabled
        }
        authConfig {
            tokenAuthEnabled
        }
        actionRequestsConfig {
            enabled
        }
        identityManagementConfig {
            enabled
        }
        lineageConfig {
            supportsImpactAnalysis
        }
        managedIngestionConfig {
            enabled
        }
        visualConfig {
            logoUrl
            faviconUrl
            hideGlossary
            queriesTab {
                queriesTabResultSize
            }
            entityProfiles {
                domain {
                    defaultTab
                }
            }
            searchResult {
                enableNameHighlight
            }
        }
        telemetryConfig {
            enableThirdPartyLogging
        }
        testsConfig {
            enabled
        }
        viewsConfig {
            enabled
        }
        featureFlags {
            readOnlyModeEnabled
            showSearchFiltersV2
            showBrowseV2
            assertionMonitorsEnabled
            subscriptionsEnabled
            datasetHealthDashboardEnabled
            showAcrylInfo
            showAccessManagement
            nestedDomainsEnabled
        }
        chromeExtensionConfig {
            enabled
            lineageEnabled
        }
    }
}

query getEntityCounts($input: EntityCountInput) {
    getEntityCounts(input: $input) {
        counts {
            entityType
            count
        }
    }
}

query getGlobalViewsSettings {
    globalViewsSettings {
        defaultView
    }
}

mutation updateGlobalViewsSettings($input: UpdateGlobalViewsSettingsInput!) {
    updateGlobalViewsSettings(input: $input)
}
